version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: productsnap-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-productsnap}
      POSTGRES_USER: ${POSTGRES_USER:-productsnap}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-productsnap}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - productsnap-network

  # Redis Cache/Queue
  redis:
    image: redis:7-alpine
    container_name: productsnap-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - productsnap-network

  # MinIO S3-compatible storage for local development
  minio:
    image: minio/minio:latest
    container_name: productsnap-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - productsnap-network

  # MinIO Client - creates bucket on startup
  minio-init:
    image: minio/mc:latest
    container_name: productsnap-minio-init
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set minio http://minio:9000 minioadmin minioadmin;
      mc mb minio/productsnap --ignore-existing;
      mc anonymous set download minio/productsnap;
      echo 'MinIO bucket created successfully';
      "
    networks:
      - productsnap-network

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: productsnap-backend
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-productsnap}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-productsnap}
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      
      # App Config
      APP_NAME: ${APP_NAME:-ProductSnap}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      BACKEND_URL: ${BACKEND_URL:-http://localhost:8000}
      
      # Security
      JWT_SECRET: ${JWT_SECRET}
      JWT_ACCESS_TOKEN_EXPIRE_MINUTES: ${JWT_ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      JWT_REFRESH_TOKEN_EXPIRE_DAYS: ${JWT_REFRESH_TOKEN_EXPIRE_DAYS:-30}
      
      # External APIs
      NANO_BANANA_API_KEY: ${NANO_BANANA_API_KEY}
      NANO_BANANA_API_URL: ${NANO_BANANA_API_URL:-https://generativelanguage.googleapis.com/v1beta}
      IMAGE_GENERATION_MODE: ${IMAGE_GENERATION_MODE:-mock}
      
      # S3/Spaces Storage
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_PUBLIC_ENDPOINT: ${S3_PUBLIC_ENDPOINT:-}
      S3_BUCKET: ${S3_BUCKET}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      S3_REGION: ${S3_REGION:-us-east-1}
      
      # PayPal
      PAYPAL_CLIENT_ID: ${PAYPAL_CLIENT_ID}
      PAYPAL_CLIENT_SECRET: ${PAYPAL_CLIENT_SECRET}
      PAYPAL_MODE: ${PAYPAL_MODE:-sandbox}
      PAYPAL_WEBHOOK_ID: ${PAYPAL_WEBHOOK_ID:-}
      PAYPAL_PLAN_ID_BASIC_MONTHLY: ${PAYPAL_PLAN_ID_BASIC_MONTHLY}
      PAYPAL_PLAN_ID_BASIC_YEARLY: ${PAYPAL_PLAN_ID_BASIC_YEARLY}
      PAYPAL_PLAN_ID_PRO_MONTHLY: ${PAYPAL_PLAN_ID_PRO_MONTHLY}
      PAYPAL_PLAN_ID_PRO_YEARLY: ${PAYPAL_PLAN_ID_PRO_YEARLY}
      
      # Email/SMTP
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_FROM_EMAIL: ${SMTP_FROM_EMAIL}
      
      # Google OAuth (optional)
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET:-}
      GOOGLE_REDIRECT_URI: ${GOOGLE_REDIRECT_URI:-}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - productsnap-network

  # Background Worker
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: productsnap-worker
    restart: unless-stopped
    command: python -m app.worker
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-productsnap}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-productsnap}
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      
      # Security
      JWT_SECRET: ${JWT_SECRET}
      JWT_ACCESS_TOKEN_EXPIRE_MINUTES: ${JWT_ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      JWT_REFRESH_TOKEN_EXPIRE_DAYS: ${JWT_REFRESH_TOKEN_EXPIRE_DAYS:-30}
      
      # External APIs
      NANO_BANANA_API_KEY: ${NANO_BANANA_API_KEY}
      NANO_BANANA_API_URL: ${NANO_BANANA_API_URL:-https://generativelanguage.googleapis.com/v1beta}
      IMAGE_GENERATION_MODE: ${IMAGE_GENERATION_MODE:-mock}
      
      # S3/Spaces Storage
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_PUBLIC_ENDPOINT: ${S3_PUBLIC_ENDPOINT:-}
      S3_BUCKET: ${S3_BUCKET}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      S3_REGION: ${S3_REGION:-us-east-1}
      
      # PayPal
      PAYPAL_CLIENT_ID: ${PAYPAL_CLIENT_ID}
      PAYPAL_CLIENT_SECRET: ${PAYPAL_CLIENT_SECRET}
      PAYPAL_MODE: ${PAYPAL_MODE:-sandbox}
      PAYPAL_WEBHOOK_ID: ${PAYPAL_WEBHOOK_ID:-}
      PAYPAL_PLAN_ID_BASIC_MONTHLY: ${PAYPAL_PLAN_ID_BASIC_MONTHLY}
      PAYPAL_PLAN_ID_BASIC_YEARLY: ${PAYPAL_PLAN_ID_BASIC_YEARLY}
      PAYPAL_PLAN_ID_PRO_MONTHLY: ${PAYPAL_PLAN_ID_PRO_MONTHLY}
      PAYPAL_PLAN_ID_PRO_YEARLY: ${PAYPAL_PLAN_ID_PRO_YEARLY}
      
      # Email/SMTP
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_FROM_EMAIL: ${SMTP_FROM_EMAIL}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - productsnap-network

  # React Frontend
  frontend:
    build:
      context: .
      dockerfile: ./frontend/Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:8000}
    container_name: productsnap-frontend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - productsnap-network

  # NGINX Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: productsnap-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - productsnap-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  nginx_cache:
    driver: local

networks:
  productsnap-network:
    driver: bridge
